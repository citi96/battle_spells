// <auto-generated />
using System;
using Battle_Spells.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Battle_Spells.Api.Migrations
{
    [DbContext(typeof(BattleSpellsDbContext))]
    [Migration("20250423182412_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Battle_Spells.Api.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ActivationEffects")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivationEffectsData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EffectDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Flavor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HeroId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ManaCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.EffectDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Condition")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ConditionalEffectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("EffectType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParentEffectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerializedParameters")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConditionalEffectId");

                    b.HasIndex("ParentEffectId");

                    b.ToTable("EffectDefinitions");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Hero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BaseHP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseOrbs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrentPlayerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Player1Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Player1MatchStateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Player2Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Player2MatchStateId")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlayerId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player1MatchStateId")
                        .IsUnique();

                    b.HasIndex("Player2Id");

                    b.HasIndex("Player2MatchStateId")
                        .IsUnique();

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SourceCardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TargetCardId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SourceCardId");

                    b.HasIndex("TargetCardId");

                    b.ToTable("MatchActions");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchPlayerCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CardId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentHealt")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Location")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PlayerMatchStateDeckId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerMatchStateGraveyardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerMatchStateHandId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PlayerMatchStateShopId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerMatchStateDeckId");

                    b.HasIndex("PlayerMatchStateGraveyardId");

                    b.HasIndex("PlayerMatchStateHandId");

                    b.HasIndex("PlayerMatchStateShopId");

                    b.ToTable("MatchPlayerCards");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchPlayerState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HeroId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerMatchStates");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchStateChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MatchActionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerializedData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StateChangeType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("MatchActionId");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchStateChanges");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("MMR")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.PlayerCard", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CardId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("PlayerCards");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Card", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.Hero", null)
                        .WithMany("Spells")
                        .HasForeignKey("HeroId");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.EffectDefinition", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.EffectDefinition", "ConditionalEffect")
                        .WithMany()
                        .HasForeignKey("ConditionalEffectId");

                    b.HasOne("Battle_Spells.Api.Entities.Card", null)
                        .WithMany("Effects")
                        .HasForeignKey("Id");

                    b.HasOne("Battle_Spells.Api.Entities.EffectDefinition", null)
                        .WithMany("SubEffects")
                        .HasForeignKey("ParentEffectId");

                    b.Navigation("ConditionalEffect");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Match", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.Player", "CurrentPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentPlayerId");

                    b.HasOne("Battle_Spells.Api.Entities.Player", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id");

                    b.HasOne("Battle_Spells.Api.Entities.MatchPlayerState", "Player1MatchState")
                        .WithOne()
                        .HasForeignKey("Battle_Spells.Api.Entities.Match", "Player1MatchStateId");

                    b.HasOne("Battle_Spells.Api.Entities.Player", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");

                    b.HasOne("Battle_Spells.Api.Entities.MatchPlayerState", "Player2MatchState")
                        .WithOne()
                        .HasForeignKey("Battle_Spells.Api.Entities.Match", "Player2MatchStateId");

                    b.Navigation("CurrentPlayer");

                    b.Navigation("Player1");

                    b.Navigation("Player1MatchState");

                    b.Navigation("Player2");

                    b.Navigation("Player2MatchState");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchAction", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.Match", "Match")
                        .WithMany("Actions")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battle_Spells.Api.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battle_Spells.Api.Entities.Card", "SourceCard")
                        .WithMany()
                        .HasForeignKey("SourceCardId");

                    b.HasOne("Battle_Spells.Api.Entities.Card", "TargetCard")
                        .WithMany()
                        .HasForeignKey("TargetCardId");

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("SourceCard");

                    b.Navigation("TargetCard");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchPlayerCard", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battle_Spells.Api.Entities.MatchPlayerState", null)
                        .WithMany("Deck")
                        .HasForeignKey("PlayerMatchStateDeckId");

                    b.HasOne("Battle_Spells.Api.Entities.MatchPlayerState", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("PlayerMatchStateGraveyardId");

                    b.HasOne("Battle_Spells.Api.Entities.MatchPlayerState", null)
                        .WithMany("Hand")
                        .HasForeignKey("PlayerMatchStateHandId");

                    b.HasOne("Battle_Spells.Api.Entities.MatchPlayerState", null)
                        .WithMany("Shop")
                        .HasForeignKey("PlayerMatchStateShopId");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchPlayerState", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battle_Spells.Api.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battle_Spells.Api.Entities.Player", "Player")
                        .WithOne()
                        .HasForeignKey("Battle_Spells.Api.Entities.MatchPlayerState", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchStateChange", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.MatchAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battle_Spells.Api.Entities.MatchAction", null)
                        .WithMany("ProcessedChanges")
                        .HasForeignKey("MatchActionId");

                    b.HasOne("Battle_Spells.Api.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.PlayerCard", b =>
                {
                    b.HasOne("Battle_Spells.Api.Entities.Card", "Card")
                        .WithMany("PlayerCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Battle_Spells.Api.Entities.Player", "Player")
                        .WithMany("PlayerCards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Card", b =>
                {
                    b.Navigation("Effects");

                    b.Navigation("PlayerCards");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.EffectDefinition", b =>
                {
                    b.Navigation("SubEffects");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Hero", b =>
                {
                    b.Navigation("Spells");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Match", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchAction", b =>
                {
                    b.Navigation("ProcessedChanges");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.MatchPlayerState", b =>
                {
                    b.Navigation("Deck");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Battle_Spells.Api.Entities.Player", b =>
                {
                    b.Navigation("PlayerCards");
                });
#pragma warning restore 612, 618
        }
    }
}
